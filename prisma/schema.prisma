// Prisma schema for E‑Mall (PostgreSQL)
// - Multi-tenant ready via company scoping on business entities
// - Inventory with universal locations (Company/Branch/Storage)
// - Orders, Assignments, Transfers
//
// Notes:
// * If you already have data, review breaking changes (e.g., ProductInCompany now has companyId).
// * Decimal precision can be tuned to your needs.

// ────────────────────────────────────────────────────────────────────────────────
// Generator & Datasource
// ────────────────────────────────────────────────────────────────────────────────

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ────────────────────────────────────────────────────────────────────────────────
// Enums
// ────────────────────────────────────────────────────────────────────────────────

enum Seasonality {
  ALL_YEAR // Butun yil sotiladi
  SPRING   // Faqat bahor
  SUMMER   // Faqat yoz
  AUTUMN   // Faqat kuz
  WINTER   // Faqat qish
}

enum Unit {
  PIECE        // Dona
  KILOGRAM     // Kilogramm
  LITER        // Litr
  METER        // Metr
  SQUARE_METER // Metr kvadrat
  CUBIC_METER  // Metr kub
  PACK         // O‘ram
}

enum ProductStatus {
  ACTIVE        // Mavjud
  INACTIVE      // Vaqtinchalik o‘chirilgan
  OUT_OF_STOCK  // Omborda yo‘q
  DISCONTINUED  // Sotuvdan chiqarilgan
  LOW_STOCK     // Kam qolgan
}

enum Currency {
  UZS
}

enum Role {
  SUPER_ADMIN
  COMPANY_OWNER
  ADMIN
  MANAGER
  SELLER
  COOK
  WAITER
  DELIVERY
  CUSTOMER
  ACCOUNTANT
  STOCK_MANAGER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  READY
  ON_THE_WAY
  COMPLETED
  CANCELLED
  RETURNED
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  CONFIRMED
  CANCELLED
}

enum CompanyType {
  CAFE
  MARKET
  STORAGE
}

enum LocationType {
  COMPANY
  BRANCH
  STORAGE
}

enum TransferStatus {
  DRAFT
  SENT
  RECEIVED
  CANCELLED
}

// ────────────────────────────────────────────────────────────────────────────────
// User Management
// ────────────────────────────────────────────────────────────────────────────────

model User {
  id           Int       @id @default(autoincrement())
  firstName    String?
  lastName     String?
  middleName   String?
  nickname     String    @unique
  phone        String    @unique
  secondPhone  String?
  password     String?   @db.VarChar(255)
  companyLimit Int       @default(1)
  salary       Int?
  avatarUrl    String?
  bio          String?
  adress       Json?
  emails       String[]  @default([])
  phones       String[]  @default([])

  // security
  isActive    Boolean  @default(true)
  isLoggedIn  Boolean  @default(true)
  activeToken String?
  ipAddress   String?
  deviceName  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles            Role[]            @default([CUSTOMER])
  orderAssignments OrderAssignment[]
  userInCompanies  UserInCompany[]

  @@index([phone])
  @@index([firstName, lastName, middleName])
  @@index([phones])
}

model UserTelegram {
  id       Int     @id @default(autoincrement())
  phone    String
  code     Int
  name     String?
  username String?
  chatId   String
  status   Boolean @default(true)
}

model UserPending {
  phone    String
  otp      Int
  nickname String
  password String
  token    String
  status   Boolean @default(true)

  @@id([phone])
}

// ────────────────────────────────────────────────────────────────────────────────
// Company & Membership
// ────────────────────────────────────────────────────────────────────────────────

model Company {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  desc       String?
  address    Json?
  mainPhone  String?
  phones     String[]    @default([])
  bannerUrl  String?
  logoUrl    String?
  emails     String[]    @default([])
  websiteUrl String?
  type       CompanyType
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  companyId  Int?
  isBranch   Boolean     @default(false)

  // Relations
  categoryInCompanies CategoryInCompany[]
  products            Product[]
  userInCompanies     UserInCompany[]
  branches            Branch[]
  storages            CompanyOnStorage[]
  locations           InventoryLocation[] // COMPANY-type locations

  @@index([name, mainPhone])
  ProductInCompany ProductInCompany[]
}

model UserInCompany {
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  roles     Role[]  @default([])

  @@id([userId, companyId])
}

// ────────────────────────────────────────────────────────────────────────────────
// Branch & Storage
// ────────────────────────────────────────────────────────────────────────────────

model Branch {
  id         Int       @id @default(autoincrement())
  name       String
  desc       String?
  address    Json?
  mainPhone  String?
  phones     String[]  @default([])
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  companyId  Int
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  locations  InventoryLocation[] // BRANCH-type locations

  @@unique([companyId, name])
  @@index([companyId])
  @@index([name, mainPhone])
}

model Storage {
  id         Int                 @id @default(autoincrement())
  name       String
  desc       String?
  address    Json?
  mainPhone  String?
  phones     String[]            @default([])
  isActive   Boolean             @default(true)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  companies  CompanyOnStorage[]
  locations  InventoryLocation[] // STORAGE-type locations

  @@unique([name])
  @@index([isActive])
}

model CompanyOnStorage {
  companyId Int
  storageId Int
  isPrimary Boolean  @default(false)
  linkedAt  DateTime @default(now())

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storage Storage @relation(fields: [storageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([companyId, storageId])
  @@index([storageId])
}

// ────────────────────────────────────────────────────────────────────────────────
// Catalog (Category/SubCategory/Product)
// ────────────────────────────────────────────────────────────────────────────────

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subcategories       SubCategory[]
  products            Product[]
  categoryInCompanies CategoryInCompany[]
  ProductInCompany    ProductInCompany[]
}

model CategoryInCompany {
  id         Int @id @default(autoincrement())
  categoryId Int
  companyId  Int

  category Category @relation(fields: [categoryId], references: [id])
  company  Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, categoryId])
  @@index([companyId])
}

model SubCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId       Int
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  products         Product[]
  ProductInCompany ProductInCompany[]

  @@unique([name, categoryId])
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  minAge      Int         @default(0)
  maxAge      Int         @default(100)
  tags        String[]    @default([])
  dimensions  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  seasonality Seasonality @default(ALL_YEAR)

  productInCompanies ProductInCompany[]
  ProductInOrder     ProductInOrder[]

  categoryId  Int?
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  subCategoryId Int?
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  companyId Int?
  Company   Company? @relation(fields: [companyId], references: [id])

  stocks    Stock[]

  @@index([name])
  @@index([tags])
  @@index([seasonality])
  TransferItem TransferItem[]
}

// Product configuration at a specific Company (price/stock thresholds/images etc.)
model ProductInCompany {
  id            Int       @id @default(autoincrement())
  productId     Int
  companyId     Int
  categoryId    Int?
  subCategoryId Int?
  barcode       String?   @unique
  description   String?
  price         Decimal   @db.Decimal(12, 2) @default(0)
  discountPrice Decimal?  @db.Decimal(12, 2)
  stock         Int       @default(0)
  lowStock      Int       @default(3)
  isFeatured    Boolean   @default(false)
  minAge        Int       @default(0)
  maxAge        Int       @default(100)
  images        String[]  @default([])
  weight        Decimal?  @db.Decimal(12, 3)
  viewCount     Int       @default(0)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  status   ProductStatus @default(ACTIVE)
  unit     Unit          @default(PIECE)
  currency Currency      @default(UZS)

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  ProductInOrder ProductInOrder[]

  @@index([status])
  @@index([companyId])
  @@index([price])
  @@index([isFeatured])
  @@unique([companyId, productId])
}

// ────────────────────────────────────────────────────────────────────────────────
// Orders & Assignments
// ────────────────────────────────────────────────────────────────────────────────

model Order {
  id        Int         @id @default(autoincrement())
  status    OrderStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  assignments     OrderAssignment[]
  ProductInOrder  ProductInOrder[]
}

model OrderAssignment {
  id        Int   @id @default(autoincrement())
  orderId   Int
  userId    Int
  role      Role // DELIVERY, COOK, SELLER, ...
  assignedAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  products ProductInOrder[]

  @@unique([orderId, userId, role])
}

model ProductInOrder {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(12, 2) // snapshot narx

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  OrderAssignment    OrderAssignment[]

  productInStorageId Int?
  ProductInCompany   ProductInCompany? @relation(fields: [productInCompanyId], references: [id])
  productInCompanyId Int?

  @@unique([orderId, productId])
}

// ────────────────────────────────────────────────────────────────────────────────
// Inventory (Universal Locations, Stocks, Transfers)
// ────────────────────────────────────────────────────────────────────────────────

model InventoryLocation {
  id        Int          @id @default(autoincrement())
  type      LocationType
  companyId Int?
  branchId  Int?
  storageId Int?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  company Company? @relation(fields: [companyId], references: [id])
  branch  Branch?  @relation(fields: [branchId], references: [id])
  storage Storage? @relation(fields: [storageId], references: [id])

  stocks        Stock[]
  fromTransfers Transfer[] @relation("FromLocation")
  toTransfers   Transfer[] @relation("ToLocation")

  @@index([type])
  @@index([companyId])
  @@index([branchId])
  @@index([storageId])
}

model Stock {
  id          Int                @id @default(autoincrement())
  locationId  Int
  productId   Int
  quantity    Int                @default(0)

  location InventoryLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  product  Product           @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@unique([locationId, productId])
  @@index([productId])
}

model Transfer {
  id             Int                @id @default(autoincrement())
  fromLocationId Int
  toLocationId   Int
  status         TransferStatus     @default(DRAFT)
  note           String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  fromLocation InventoryLocation @relation("FromLocation", fields: [fromLocationId], references: [id], onDelete: Restrict)
  toLocation   InventoryLocation @relation("ToLocation",   fields: [toLocationId],   references: [id], onDelete: Restrict)

  items TransferItem[]

  @@index([fromLocationId])
  @@index([toLocationId])
}

model TransferItem {
  id         Int      @id @default(autoincrement())
  transferId Int
  productId  Int
  quantity   Int      @default(1)

  transfer Transfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@index([productId])
  @@unique([transferId, productId])
}
